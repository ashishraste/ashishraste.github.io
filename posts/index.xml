<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Ashish Raste</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Ashish Raste</description>
    <image>
      <title>Ashish Raste</title>
      <url>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.143.1</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 12 Feb 2025 13:53:52 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Troubleshooting CMake Errors</title>
      <link>http://localhost:1313/posts/2025-02-12-troubleshooting-cmake-errors/</link>
      <pubDate>Wed, 12 Feb 2025 13:53:52 +0800</pubDate>
      <guid>http://localhost:1313/posts/2025-02-12-troubleshooting-cmake-errors/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt; is the most widely used build system tool in the C++ programming landscape, and troubleshooting its build errors can take up valuable time for software engineers. This challenge is even greater for robotics engineers new to the ecosystem, who are eager to see things moving. This article demonstrates an approach to narrowing down CMake build errors and shares my thoughts on making the best use of its modern features.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
